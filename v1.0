<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Gestor de Finanzas Personales — Revisado</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap");
    body { font-family: "Inter", sans-serif; background-color: #f3f4f6; }
    .tab-button.active { background-color: #ffffff; border-bottom: 2px solid #3b82f6; color: #3b82f6; }
    .loading-spinner { border: 4px solid rgba(0, 0, 0, 0.1); border-left-color: #3b82f6; border-radius: 50%; width: 24px; height: 24px; animation: spin 1s linear infinite; }
    @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
  </style>
</head>
<body class="p-4 md:p-8">
  <!-- Header -->
  <header class="bg-white p-6 rounded-2xl shadow-md mb-6">
    <h1 class="text-3xl font-bold text-center text-gray-800">Gestor de Finanzas</h1>
    <p id="userIdDisplay" class="text-sm text-gray-500 text-center mt-2 break-all"></p>
    <div id="statusMessage" class="text-center mt-2 p-2 rounded-lg text-sm font-semibold" aria-live="polite"></div>
  </header>

  <!-- Tabs -->
  <div class="bg-white p-2 rounded-2xl shadow-md mb-6 flex flex-wrap justify-center gap-2" role="tablist">
    <button id="tab-registro" class="tab-button p-3 rounded-xl font-medium text-gray-600 hover:bg-gray-100 active" role="tab" aria-selected="true" aria-controls="content-registro">Registro de Transacciones</button>
    <button id="tab-presupuestos" class="tab-button p-3 rounded-xl font-medium text-gray-600 hover:bg-gray-100" role="tab" aria-selected="false" aria-controls="content-presupuestos">Presupuestos</button>
    <button id="tab-conciliacion" class="tab-button p-3 rounded-xl font-medium text-gray-600 hover:bg-gray-100" role="tab" aria-selected="false" aria-controls="content-conciliacion">Conciliación Bancaria</button>
    <button id="tab-dashboard" class="tab-button p-3 rounded-xl font-medium text-gray-600 hover:bg-gray-100" role="tab" aria-selected="false" aria-controls="content-dashboard">Tablero de Control</button>
  </div>

  <!-- Main Content -->
  <main class="bg-white p-6 rounded-2xl shadow-md">
    <!-- Registro -->
    <section id="content-registro" class="tab-content" role="tabpanel" aria-labelledby="tab-registro">
      <h2 class="text-2xl font-semibold text-gray-700 mb-4">Registro de Transacciones</h2>
      <form id="transactionForm" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6" novalidate>
        <div>
          <label for="fecha" class="text-sm font-medium text-gray-600">Fecha</label>
          <input type="date" id="fecha" required class="p-3 border rounded-lg w-full" />
        </div>
        <div>
          <label for="cuenta" class="text-sm font-medium text-gray-600">Cuenta Origen</label>
          <select id="cuenta" required class="p-3 border rounded-lg w-full">
            <option value="">Seleccione...</option>
          </select>
        </div>
        <div>
          <label for="tipo" class="text-sm font-medium text-gray-600">Tipo</label>
          <select id="tipo" required class="p-3 border rounded-lg w-full">
            <option value="">Seleccione...</option>
            <option value="Ingreso">Ingreso</option>
            <option value="Gasto">Gasto</option>
            <option value="Movimiento">Movimiento entre Cuentas</option>
            <option value="PagoTarjeta">Pago de Tarjeta de Crédito</option>
          </select>
        </div>
        <div>
          <label for="categoria" class="text-sm font-medium text-gray-600">Categoría</label>
          <select id="categoria" required class="p-3 border rounded-lg w-full">
            <option value="">Seleccione...</option>
          </select>
        </div>
        <div id="cuentaDestinoContainer" class="hidden">
          <label for="cuentaDestino" class="text-sm font-medium text-gray-600">Cuenta Destino</label>
          <select id="cuentaDestino" class="p-3 border rounded-lg w-full">
            <option value="">Seleccione...</option>
          </select>
        </div>
        <div class="md:col-span-2">
          <label for="descripcion" class="text-sm font-medium text-gray-600">Descripción</label>
          <input type="text" id="descripcion" required class="p-3 border rounded-lg w-full" placeholder="Detalle de la transacción" />
        </div>
        <div>
          <label for="cantidad" class="text-sm font-medium text-gray-600">Monto</label>
          <input type="number" id="cantidad" required class="p-3 border rounded-lg w-full" inputmode="decimal" step="0.01" min="0" placeholder="0" />
        </div>
        <div class="flex items-end mt-4">
          <button type="submit" class="w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">Añadir</button>
        </div>
      </form>

      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 rounded-xl overflow-hidden shadow-sm">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase">Fecha</th>
              <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase">Cuenta</th>
              <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase">Descripción</th>
              <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase">Categoría</th>
              <th class="px-6 py-3 text-left text-xs font-semibold text-gray-500 uppercase">Tipo</th>
              <th class="px-6 py-3 text-right text-xs font-semibold text-gray-500 uppercase">Monto</th>
              <th class="px-6 py-3 text-right text-xs font-semibold text-gray-500 uppercase">Acciones</th>
            </tr>
          </thead>
          <tbody id="transactionTable" class="divide-y divide-gray-100"></tbody>
        </table>
      </div>
    </section>

    <!-- Presupuestos -->
    <section id="content-presupuestos" class="tab-content hidden" role="tabpanel" aria-labelledby="tab-presupuestos">
      <h2 class="text-2xl font-semibold text-gray-700 mb-4">Presupuestos mensuales (Gastos)</h2>
      <div id="budgetsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6"></div>
      <button id="saveBudgetsBtn" class="w-full p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">Guardar Presupuestos</button>
    </section>

    <!-- Conciliación -->
    <section id="content-conciliacion" class="tab-content hidden" role="tabpanel" aria-labelledby="tab-conciliacion">
      <h2 class="text-2xl font-semibold text-gray-700 mb-4">Conciliación Bancaria</h2>
      <p class="text-sm text-gray-600 mb-4">Resumen por cuenta (sin saldos iniciales). Los movimientos y pagos de tarjeta trasladan dinero entre cuentas y no se consideran ingresos/gastos.</p>
      <div id="reconSummary" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"></div>
    </section>

    <!-- Dashboard -->
    <section id="content-dashboard" class="tab-content hidden" role="tabpanel" aria-labelledby="tab-dashboard">
      <h2 class="text-2xl font-semibold text-gray-700 mb-4">Tablero</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="p-4 rounded-xl border">
          <h3 class="font-semibold mb-2">Ingresos por categoría</h3>
          <canvas id="ingresosChart" height="220"></canvas>
          <p id="ingresosEmpty" class="text-sm text-gray-500 mt-2 hidden">Sin datos de ingresos.</p>
        </div>
        <div class="p-4 rounded-xl border">
          <h3 class="font-semibold mb-2">Gastos por categoría</h3>
          <canvas id="gastosChart" height="220"></canvas>
          <p id="gastosEmpty" class="text-sm text-gray-500 mt-2 hidden">Sin datos de gastos.</p>
        </div>
      </div>
    </section>
  </main>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // ===== Configuración base =====
    const cuentas = [
      "Banco del Reserva (Aikido - Aiki Life)",
      "Banco Popular Nomina",
      "Banco Popular Ahorros",
      "Banco del Reserva Tarjeta Credito"
    ];

    const ingresosCategorias = [
      "Ingreso Aikido",
      "Ingreso Aiki Life Center",
      "Ingreso Nómina",
      "Otros ingresos"
    ];

    const gastosCategorias = [
      "Alimentación",
      "Combustible",
      "Suscripciones",
      "Otros gastos"
    ];

    const moneda = new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP', maximumFractionDigits: 0 });

    // ===== Estado =====
    let allTransactions = JSON.parse(localStorage.getItem('fin_tx') || '[]');
    let monthlyBudgets = JSON.parse(localStorage.getItem('fin_budgets') || '{}');

    // ===== Tabs =====
    const tabs = document.querySelectorAll('.tab-button');
    const contents = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => { t.classList.remove('active'); t.setAttribute('aria-selected','false'); });
        tab.classList.add('active');
        tab.setAttribute('aria-selected','true');
        contents.forEach(c => c.classList.add('hidden'));
        const target = tab.id.replace('tab-','content-');
        document.getElementById(target).classList.remove('hidden');
        if (target === 'content-dashboard') renderCharts();
        if (target === 'content-conciliacion') renderReconciliation();
        if (target === 'content-presupuestos') renderBudgets();
      });
    });

    // ===== Elementos =====
    const form = document.getElementById('transactionForm');
    const table = document.getElementById('transactionTable');
    const selectCuenta = document.getElementById('cuenta');
    const selectTipo = document.getElementById('tipo');
    const selectCategoria = document.getElementById('categoria');
    const cuentaDestinoContainer = document.getElementById('cuentaDestinoContainer');
    const selectCuentaDestino = document.getElementById('cuentaDestino');
    const statusMessage = document.getElementById('statusMessage');

    // ===== Helpers =====
    function setStatus(msg, type = 'info') {
      statusMessage.textContent = msg;
      statusMessage.className = `text-center mt-2 p-2 rounded-lg text-sm font-semibold ${type === 'ok' ? 'bg-green-50 text-green-700' : type === 'err' ? 'bg-red-50 text-red-700' : 'bg-blue-50 text-blue-700'}`;
      setTimeout(() => { statusMessage.textContent = ''; statusMessage.className = 'text-center mt-2 p-2 rounded-lg text-sm font-semibold'; }, 2500);
    }

    function populateSelect(el, options, {exclude} = {}) {
      el.innerHTML = '<option value="">Seleccione...</option>';
      options.filter(o => !exclude || o !== exclude).forEach(opt => {
        const op = document.createElement('option');
        op.value = opt; op.textContent = opt; el.appendChild(op);
      });
    }

    function formatAmount(tipo, cantidad) {
      // Gastos se muestran como negativos para lectura rápida
      const sign = (tipo === 'Gasto') ? -1 : 1;
      return moneda.format(sign * cantidad);
    }

    // ===== Inicialización de selects =====
    populateSelect(selectCuenta, cuentas);

    selectTipo.addEventListener('change', () => {
      const tipo = selectTipo.value;
      // Mostrar/ocultar cuenta destino según tipo
      const needsDestino = (tipo === 'Movimiento' || tipo === 'PagoTarjeta');
      cuentaDestinoContainer.classList.toggle('hidden', !needsDestino);

      if (needsDestino) {
        const origen = selectCuenta.value || null;
        // Para PagoTarjeta, sugerir que el destino sea la tarjeta de crédito
        if (tipo === 'PagoTarjeta') {
          populateSelect(selectCuentaDestino, cuentas, {});
          // preseleccionar tarjeta si existe
          [...selectCuentaDestino.options].forEach(o => {
            if (o.value && o.value.toLowerCase().includes('tarjeta')) o.selected = true;
          });
        } else {
          populateSelect(selectCuentaDestino, cuentas, { exclude: origen });
        }
      }

      // Poblar categorías según tipo
      const cats = tipo === 'Ingreso' ? ingresosCategorias : tipo === 'Gasto' ? gastosCategorias : ['—'];
      populateSelect(selectCategoria, cats);
      selectCategoria.required = (tipo === 'Ingreso' || tipo === 'Gasto');
    });

    selectCuenta.addEventListener('change', () => {
      if (!selectTipo.value) return;
      if (selectTipo.value === 'Movimiento') {
        populateSelect(selectCuentaDestino, cuentas, { exclude: selectCuenta.value });
      }
    });

    // ===== Manejo del formulario =====
    form.addEventListener('submit', e => {
      e.preventDefault();
      const data = {
        id: crypto.randomUUID(),
        fecha: document.getElementById('fecha').value,
        cuenta: selectCuenta.value,
        tipo: selectTipo.value,
        categoria: selectCategoria.value || '',
        descripcion: document.getElementById('descripcion').value.trim(),
        cantidad: parseFloat(document.getElementById('cantidad').value) || 0,
        cuentaDestino: selectCuentaDestino.value || ''
      };

      // Validaciones mínimas
      if (!data.fecha || !data.cuenta || !data.tipo || !data.descripcion || !(data.cantidad > 0)) {
        setStatus('Completa los campos obligatorios y un monto > 0.', 'err');
        return;
      }
      if ((data.tipo === 'Movimiento' || data.tipo === 'PagoTarjeta') && !data.cuentaDestino) {
        setStatus('Selecciona la cuenta destino.', 'err');
        return;
      }
      if ((data.tipo === 'Ingreso' || data.tipo === 'Gasto') && !data.categoria) {
        setStatus('Selecciona una categoría.', 'err');
        return;
      }

      allTransactions.push(data);
      localStorage.setItem('fin_tx', JSON.stringify(allTransactions));
      form.reset();
      // mantener tipo/categorías visibles coherentes tras reset
      selectCategoria.innerHTML = '<option value="">Seleccione...</option>';
      cuentaDestinoContainer.classList.add('hidden');
      renderTable();
      renderCharts();
      renderReconciliation();
      setStatus('Transacción añadida', 'ok');
    });

    // ===== Tabla =====
    function renderTable() {
      table.innerHTML = '';
      if (!allTransactions.length) {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="px-6 py-3 text-sm text-gray-500" colspan="7">Aún no hay transacciones.</td>`;
        table.appendChild(tr);
        return;
      }

      // Orden por fecha ascendente
      const rows = [...allTransactions].sort((a,b) => a.fecha.localeCompare(b.fecha));

      rows.forEach(t => {
        const tr = document.createElement('tr');
        tr.className = 'hover:bg-gray-50';
        const displayMonto = formatAmount(t.tipo, t.cantidad);
        tr.innerHTML = `
          <td class="px-6 py-2 whitespace-nowrap">${t.fecha}</td>
          <td class="px-6 py-2">${t.cuenta}${t.cuentaDestino ? ` → <span class="text-gray-500">${t.cuentaDestino}</span>` : ''}</td>
          <td class="px-6 py-2">${t.descripcion}</td>
          <td class="px-6 py-2">${t.categoria || '—'}</td>
          <td class="px-6 py-2">${t.tipo}</td>
          <td class="px-6 py-2 text-right ${t.tipo==='Gasto' ? 'text-red-600' : 'text-gray-800'}">${displayMonto}</td>
          <td class="px-6 py-2 text-right">
            <button class="text-sm text-red-600 hover:underline" data-del="${t.id}">Eliminar</button>
          </td>
        `;
        table.appendChild(tr);
      });

      // Delegado de eliminación
      table.querySelectorAll('[data-del]').forEach(btn => {
        btn.addEventListener('click', () => {
          const id = btn.getAttribute('data-del');
          allTransactions = allTransactions.filter(x => x.id !== id);
          localStorage.setItem('fin_tx', JSON.stringify(allTransactions));
          renderTable();
          renderCharts();
          renderReconciliation();
          setStatus('Transacción eliminada', 'ok');
        });
      });
    }

    // ===== Presupuestos =====
    const budgetsContainer = document.getElementById('budgetsContainer');
    const saveBudgetsBtn = document.getElementById('saveBudgetsBtn');

    function renderBudgets() {
      const cats = gastosCategorias;
      budgetsContainer.innerHTML = '';

      cats.forEach(cat => {
        const spent = sumByCategory(cat, 'Gasto', monthKey(new Date()));
        const target = Number(monthlyBudgets[cat] || 0);
        const pct = target > 0 ? Math.min(100, Math.round(100 * spent / target)) : 0;
        const card = document.createElement('div');
        card.className = 'p-4 rounded-xl border';
        card.innerHTML = `
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-semibold">${cat}</h3>
            <input type="number" inputmode="numeric" step="1000" min="0" class="w-32 p-2 border rounded-lg text-right" value="${target}" aria-label="Presupuesto para ${cat}" />
          </div>
          <div class="text-sm text-gray-600 mb-1">Gastado: <strong>${moneda.format(spent)}</strong> ${target ? `de ${moneda.format(target)}` : ''}</div>
          <div class="w-full bg-gray-100 rounded-full h-2 overflow-hidden">
            <div class="h-2 bg-blue-600" style="width:${pct}%;"></div>
          </div>
        `;
        budgetsContainer.appendChild(card);
      });
    }

    saveBudgetsBtn.addEventListener('click', () => {
      const cards = budgetsContainer.querySelectorAll('div.p-4.rounded-xl.border');
      const cats = gastosCategorias;
      cards.forEach((card, i) => {
        const input = card.querySelector('input');
        const val = Math.max(0, Number(input.value || 0));
        monthlyBudgets[cats[i]] = val;
      });
      localStorage.setItem('fin_budgets', JSON.stringify(monthlyBudgets));
      setStatus('Presupuestos guardados', 'ok');
      renderBudgets();
    });

    function sumByCategory(cat, tipo, monthKeyStr) {
      return allTransactions
        .filter(t => t.tipo === tipo && t.categoria === cat && monthKey(new Date(t.fecha)) === monthKeyStr)
        .reduce((acc, t) => acc + t.cantidad, 0);
    }

    function monthKey(d) { return `${d.getFullYear()}-${String(d.getMonth()+1).padStart(2,'0')}`; }

    // ===== Conciliación =====
    const reconSummary = document.getElementById('reconSummary');

    function renderReconciliation() {
      // saldo por cuenta (sin saldos iniciales)
      const saldos = Object.fromEntries(cuentas.map(c => [c, 0]));

      for (const t of allTransactions) {
        if (t.tipo === 'Ingreso') {
          saldos[t.cuenta] += t.cantidad;
        } else if (t.tipo === 'Gasto') {
          saldos[t.cuenta] -= t.cantidad;
        } else if (t.tipo === 'Movimiento') {
          saldos[t.cuenta] -= t.cantidad;
          if (t.cuentaDestino) saldos[t.cuentaDestino] += t.cantidad;
        } else if (t.tipo === 'PagoTarjeta') {
          // Se considera como transferencia hacia la tarjeta
          saldos[t.cuenta] -= t.cantidad;
          if (t.cuentaDestino) saldos[t.cuentaDestino] += t.cantidad;
        }
      }

      reconSummary.innerHTML = '';
      cuentas.forEach(c => {
        const val = saldos[c] || 0;
        const card = document.createElement('div');
        card.className = 'p-4 rounded-xl border flex items-center justify-between';
        card.innerHTML = `<div>
            <div class="text-sm text-gray-500">${c}</div>
            <div class="text-xl font-semibold ${val < 0 ? 'text-red-600' : 'text-gray-800'}">${moneda.format(val)}</div>
          </div>`;
        reconSummary.appendChild(card);
      });
    }

    // ===== Gráficos =====
    let ingresosChart, gastosChart;
    const ingresosEmpty = document.getElementById('ingresosEmpty');
    const gastosEmpty = document.getElementById('gastosEmpty');

    function buildAgg() {
      const ingresosData = {};
      const gastosData = {};
      allTransactions.forEach(t => {
        if (t.tipo === 'Ingreso') ingresosData[t.categoria] = (ingresosData[t.categoria] || 0) + t.cantidad;
        if (t.tipo === 'Gasto') gastosData[t.categoria] = (gastosData[t.categoria] || 0) + t.cantidad;
        // NOTA: Movimiento y PagoTarjeta se excluyen de los gráficos
      });
      return { ingresosData, gastosData };
    }

    function renderCharts() {
      const { ingresosData, gastosData } = buildAgg();

      const ingLabels = Object.keys(ingresosData);
      const ingValues = Object.values(ingresosData);
      const gasLabels = Object.keys(gastosData);
      const gasValues = Object.values(gastosData);

      ingresosEmpty.classList.toggle('hidden', ingValues.length !== 0);
      gastosEmpty.classList.toggle('hidden', gasValues.length !== 0);

      if (ingresosChart) ingresosChart.destroy();
      if (gastosChart) gastosChart.destroy();

      const commonOpts = { responsive: true, plugins: { legend: { position: 'bottom' } }, maintainAspectRatio: false };

      const ingCtx = document.getElementById('ingresosChart').getContext('2d');
      ingresosChart = new Chart(ingCtx, {
        type: 'pie',
        data: { labels: ingLabels, datasets: [{ data: ingValues }] },
        options: commonOpts
      });

      const gasCtx = document.getElementById('gastosChart').getContext('2d');
      gastosChart = new Chart(gasCtx, {
        type: 'pie',
        data: { labels: gasLabels, datasets: [{ data: gasValues }] },
        options: commonOpts
      });
    }

    // ===== Carga inicial =====
    (function init() {
      // Preseleccionar fecha de hoy
      const hoy = new Date();
      document.getElementById('fecha').value = hoy.toISOString().slice(0,10);
      renderTable();
      renderBudgets();
      renderReconciliation();
    })();
  </script>
</body>
</html>
